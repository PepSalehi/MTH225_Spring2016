\documentclass{article}

\begin{document}
Week5 IC1 Example
<<>>=
load("week5_IC1_problem1.Rdata")
str(Lvl)
@
Pick the variable for your group by uncommenting the appropriate statements:
<<>>=
y<-Y5                         #Groups 1-4, use Y1, Y2, Y3, and Y4 respectively
L<-nlevels(Lvl)               #number of levels for the factor
#level<-as.numeric(levels(Lvl))[Lvl]   #convert factor to integer
level<-as.integer(Lvl)
N<-length(y)                  #total observations
                              #variable Lvl contains the single factor levels
@
Call STAN
<<>>=
library(rstan)                                #make sure rstan is available
rstan_options(auto_write = TRUE)              #use multiple cores
options(mc.cores = parallel::detectCores())   #if we have them
stanfit<-stan("week5_IC1_example.stan")       #call STAN using defaults
print(stanfit)
@
Launch shinystan
<<>>=
library(shinystan)                                   #launch shinystan
launch_shinystan(stanfit)                            
@
Histogram of alpha1 and alpha2
<<>>=
library(ggplot2)                                     #load ggplot2 library
pd<-extract(stanfit)                                 #extract posterior draw values
str(pd)                                              #show the structure of the extracted data
alpha<-c(pd$alpha[,1],pd$alpha[,2])                                              #concatenate alpha values for the two levels
lvl<-c(rep("level1",length(pd$alpha[,1])),rep("level2",length(pd$alpha[,2])))    #vector of levels
pdf<-data.frame(alpha,lvl)                                                       #construct data frame for ggplot
p<-ggplot(pdf,aes(alpha))                                                        #plot histogram
p+stat_bin(aes(color=as.factor(lvl)),geom="histogram",position="dodge")          
@
Probability that alpha1>alpha2
<<>>=
n_pairs<-length(pd$alpha[,1])                                           #count the number of pairs of alpha values
n_pairs                                                                 
n_alpha1_greater<-sum(as.numeric(pd$alpha[,1]>pd$alpha[,2]))            #count the number with alpha1 > alpha2
n_alpha1_greater
n_alpha1_greater/n_pairs #probability that alpha1 > alpha2              #proportion with alpha1 > alpha2
(n_pairs-n_alpha1_greater)/n_pairs #probability that alpha2 > alpha1    #proportion with alpha2 > alpha1
@

\end{document}